// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: scoring.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoringServiceClient is the client API for ScoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoringServiceClient interface {
	GetCategoryScoreOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*ScoresByCategories, error)
	GetScoresByTicketOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*ScoresByTickets, error)
	GetOveralQualityScoreOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Score, error)
	GetScoreChangeOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Score, error)
}

type scoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoringServiceClient(cc grpc.ClientConnInterface) ScoringServiceClient {
	return &scoringServiceClient{cc}
}

func (c *scoringServiceClient) GetCategoryScoreOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*ScoresByCategories, error) {
	out := new(ScoresByCategories)
	err := c.cc.Invoke(ctx, "/service.ScoringService/GetCategoryScoreOverPeriodOfTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) GetScoresByTicketOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*ScoresByTickets, error) {
	out := new(ScoresByTickets)
	err := c.cc.Invoke(ctx, "/service.ScoringService/GetScoresByTicketOverPeriodOfTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) GetOveralQualityScoreOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/service.ScoringService/GetOveralQualityScoreOverPeriodOfTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) GetScoreChangeOverPeriodOfTime(ctx context.Context, in *Period, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/service.ScoringService/GetScoreChangeOverPeriodOfTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoringServiceServer is the server API for ScoringService service.
// All implementations must embed UnimplementedScoringServiceServer
// for forward compatibility
type ScoringServiceServer interface {
	GetCategoryScoreOverPeriodOfTime(context.Context, *Period) (*ScoresByCategories, error)
	GetScoresByTicketOverPeriodOfTime(context.Context, *Period) (*ScoresByTickets, error)
	GetOveralQualityScoreOverPeriodOfTime(context.Context, *Period) (*Score, error)
	GetScoreChangeOverPeriodOfTime(context.Context, *Period) (*Score, error)
	mustEmbedUnimplementedScoringServiceServer()
}

// UnimplementedScoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScoringServiceServer struct {
}

func (UnimplementedScoringServiceServer) GetCategoryScoreOverPeriodOfTime(context.Context, *Period) (*ScoresByCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryScoreOverPeriodOfTime not implemented")
}
func (UnimplementedScoringServiceServer) GetScoresByTicketOverPeriodOfTime(context.Context, *Period) (*ScoresByTickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByTicketOverPeriodOfTime not implemented")
}
func (UnimplementedScoringServiceServer) GetOveralQualityScoreOverPeriodOfTime(context.Context, *Period) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOveralQualityScoreOverPeriodOfTime not implemented")
}
func (UnimplementedScoringServiceServer) GetScoreChangeOverPeriodOfTime(context.Context, *Period) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreChangeOverPeriodOfTime not implemented")
}
func (UnimplementedScoringServiceServer) mustEmbedUnimplementedScoringServiceServer() {}

// UnsafeScoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoringServiceServer will
// result in compilation errors.
type UnsafeScoringServiceServer interface {
	mustEmbedUnimplementedScoringServiceServer()
}

func RegisterScoringServiceServer(s grpc.ServiceRegistrar, srv ScoringServiceServer) {
	s.RegisterService(&ScoringService_ServiceDesc, srv)
}

func _ScoringService_GetCategoryScoreOverPeriodOfTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetCategoryScoreOverPeriodOfTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ScoringService/GetCategoryScoreOverPeriodOfTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetCategoryScoreOverPeriodOfTime(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_GetScoresByTicketOverPeriodOfTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetScoresByTicketOverPeriodOfTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ScoringService/GetScoresByTicketOverPeriodOfTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetScoresByTicketOverPeriodOfTime(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_GetOveralQualityScoreOverPeriodOfTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetOveralQualityScoreOverPeriodOfTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ScoringService/GetOveralQualityScoreOverPeriodOfTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetOveralQualityScoreOverPeriodOfTime(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_GetScoreChangeOverPeriodOfTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Period)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetScoreChangeOverPeriodOfTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ScoringService/GetScoreChangeOverPeriodOfTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetScoreChangeOverPeriodOfTime(ctx, req.(*Period))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoringService_ServiceDesc is the grpc.ServiceDesc for ScoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ScoringService",
	HandlerType: (*ScoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryScoreOverPeriodOfTime",
			Handler:    _ScoringService_GetCategoryScoreOverPeriodOfTime_Handler,
		},
		{
			MethodName: "GetScoresByTicketOverPeriodOfTime",
			Handler:    _ScoringService_GetScoresByTicketOverPeriodOfTime_Handler,
		},
		{
			MethodName: "GetOveralQualityScoreOverPeriodOfTime",
			Handler:    _ScoringService_GetOveralQualityScoreOverPeriodOfTime_Handler,
		},
		{
			MethodName: "GetScoreChangeOverPeriodOfTime",
			Handler:    _ScoringService_GetScoreChangeOverPeriodOfTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scoring.proto",
}
